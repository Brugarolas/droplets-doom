class BloodSquirt : Droplets replaces Blood
{
	Default
	{
		+NOBLOCKMAP
		+DONTTHRUST
		+THRUACTORS
		+NOTELEPORT
		+ALLOWPARTICLES
		+PUFFGETSOWNER
		+NOGRAVITY
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256,"Spray");
		TNT1 A 0 A_Jump(256,"Mid");
		TNT1 A 0
		{
			A_FaceTarget(0,0,0,0,FAF_MIDDLE);
			A_Warp(AAPTR_DEFAULT,cos(angle)*8,sin(angle)*8,sin(pitch)*8,0,WARPF_ABSOLUTEOFFSET);
			A_SpawnItemEx("BloodHitPuffSmall",0,0,0,0,0,0,0,SXF_TRANSFERTRANSLATION);
		}
		stop;
	Spray:
		TNT1 A 0
		{
			A_FaceTarget(0,0,0,0,FAF_MIDDLE);
			A_Warp(AAPTR_DEFAULT,cos(angle)*8,sin(angle)*8,sin(pitch)*8,0,WARPF_ABSOLUTEOFFSET);
			A_SpawnItemEx("BloodHitPuff",0,0,0,0,0,0,0,SXF_TRANSFERTRANSLATION,128-GetCVar("blood_amt")*64);
		}
		stop;
	Mid:
		TNT1 A 0
		{
			A_FaceTarget(0,0,0,0,FAF_MIDDLE);
			A_Warp(AAPTR_DEFAULT,cos(angle)*8,sin(angle)*8,sin(pitch)*8,0,WARPF_ABSOLUTEOFFSET);
			A_SpawnItemEx("BloodHitPuffMid",0,0,0,0,0,0,0,SXF_TRANSFERTRANSLATION,64-GetCVar("blood_amt")*32);
		}
		stop;
	}
}

class BloodHitPuff : Droplets
{
	double user_scale, user_force, user_angmom;
	
	action void A_SpawnDroplet(double drop_size)
	{
		double angle = invoker.angle + frandom(-5.0,5.0);
		double force = invoker.user_force * frandom(0.9,1.1);
		drop_size *= frandom(0.9,1.1);
		let droplet = BloodDroplet(Actor.Spawn('BloodDroplet',invoker.pos + (0,0,4)));
		droplet.final_scale = drop_size;
		droplet.scale = (drop_size, drop_size) * 0.3333;
		droplet.Vel3DFromAngle(force, angle, invoker.pitch);
		droplet.translation = invoker.translation;
	}
	
	Default
	{
		+NOBLOCKMAP
		+DONTTHRUST
		+THRUACTORS
		+NOTELEPORT
		+FORCEXYBILLBOARD
		+NOGRAVITY
		Height 1;
		Radius 1;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			angle = frandom(0.0,360.0);
			user_scale = 0.1615;
			user_force = frandom(8.0,16.0);
			user_angmom = frandom(3.75, 15.0);
			pitch = frandom(-85.0,85.0);
			//A_PlaySound("blood/hit",0,0.3);
			scale.x = frandom(0.65,0.85);
			scale.y = 1.5 - scale.x;
			scale.x *= randompick(1,-1);
			A_FloorSplat(0.75);
		}
		BLPF ABCDE 2
		{
			switch(GetCVar("blood_amt"))
			{
			case 0:
				A_SpawnDroplet(user_scale * 1.2);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale * 0.8);
				break;
			case 1:
				A_SpawnDroplet(user_scale * 1.6);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale * 1.4);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale * 1.2);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale);
				break;
			case 2:
				A_SpawnDroplet(user_scale * 2.0);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale * 1.8);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale * 1.6);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale * 1.4);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale * 1.2);
			}
			angle += frandom(-user_angmom * 0.5, user_angmom);
			user_force *= 0.8;
			user_scale *= 1.2;
		}
		TNT1 A 0;
		Stop;
	}
}

class BloodHitPuffMid : BloodHitPuff
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			angle = frandom(0.0,360.0);
			user_scale = 0.1615;
			user_force = frandom(7.0,14.0);
			user_angmom = frandom(-10.0,10.0);
			pitch = frandom(-85.0,85.0);
			//A_PlaySound("blood/hit",0,0.2);
			scale.x = frandom(0.4,0.5);
			scale.y = 1.0 - scale.x;
			scale.x *= randompick(1,-1);
		}
		BLPF ABCDE 2
		{
			switch(GetCVar("blood_amt"))
			{
			case 0:
				A_SpawnDroplet(user_scale * 0.8);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale * 0.6);
				break;
			case 1:
				A_SpawnDroplet(user_scale * 1.2);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale * 0.8);
				break;
			case 2:
				A_SpawnDroplet(user_scale * 1.6);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale * 1.4);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale * 1.2);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale);
			}
			angle += frandom(-user_angmom * 0.5, user_angmom);
			user_force *= 0.8;
			user_scale *= 1.2;
		}
		TNT1 A 0;
		Stop;
	}
}

class BloodHitPuffSmall : BloodHitPuff
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			angle = frandom(0.0,360.0);
			user_scale = 0.1615;
			user_force = frandom(6.0,12.0);
			user_angmom = frandom(-5.0,5.0);
			pitch = frandom(-85.0,85.0);
			//A_PlaySound("blood/hit",0,0.1);
			scale.x = frandom(0.15,0.35);
			scale.y = 0.5 - scale.x;
			scale.x *= randompick(1,-1);
		}
		BLPF ABCDE 2
		{
			switch(GetCVar("blood_amt"))
			{
			case 0:
				A_SpawnDroplet(user_scale * 0.4);
				break;
			case 1:
				A_SpawnDroplet(user_scale * 0.8);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale * 0.6);
				break;
			case 2:
				A_SpawnDroplet(user_scale * 1.2);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale);
				angle += frandom(-user_angmom * 0.5, user_angmom);
				A_SpawnDroplet(user_scale * 0.8);
			}
			angle += frandom(-user_angmom * 0.5, user_angmom);
			user_force *= 0.8;
			user_scale *= 1.2;
		}
		TNT1 A 0;
		Stop;
	}
}

class BloodSplatPuff : BloodHitPuff replaces BloodSplatter
{}

class AxeBloodPuff : BloodHitPuff replaces AxeBlood
{}